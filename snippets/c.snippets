global !p
import px.snippets
endglobal

snippet def "#define ..."
#define ${1:test}
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${1:$}
	return 0;
}
endsnippet

snippet mainn "main(void)"
int main(void)
{
	${1:$}
	return 0;
}
endsnippet

snippet rt "return"
return ${1:ret};
endsnippet

snippet if "if" b
if (${1:condition})
{
	${0:${VISUAL:$}}
}
endsnippet

global !p
def create_fn_placeholders(snip):
    ending = ';'
    if os.path.splitext(px.buffer.get().name)[1] == '.c':
        ending = '\n{\n\t$0\n}'
    else:
        ending = ';'

    # retrieving singlee line from current string and treat it like tabstops
    # count
    try:
        placeholders_amount = int(snip.buffer[snip.line].strip())
    except:
        # There is an error when 0 is passed with the lign above, so we just
        # generate a body for 0 when it is the case:
        anon_snippet_body = '${1:void} ${2:function_name}(void)'
        anon_snippet_body += ending
        snip.expand_anon(anon_snippet_body)
        return
    starting = 2
    snip.buffer[snip.line] = ' ' * snip.buffer[snip.line].count(" ")
    anon_snippet_body = '${1:void} ${2:foo}('
    anon_snippet_body += ', '.join(['$' + '{' + str(i+1) + ':int}' + ' ${' + str(i + 2) + ':name}'
        for i in range(starting, placeholders_amount * 2 + starting, 2)])
    anon_snippet_body += ')'
    anon_snippet_body += ending
    # expand anonymous snippet
    snip.expand_anon(anon_snippet_body)
endglobal

post_jump "create_fn_placeholders(snip)"
snippet "fn(\d*)" "Function declaration" br
`!p snip.rv = match.group(1)`
endsnippet

snippet inc "include external library" b
#include <${1:stdio}.h>
endsnippet

global !p
def inc_header(snip):
    anon_snippet_body = '#include "${1:' + os.path.basename(os.path.splitext(px.buffer.get().name)[0]) + '}.h"'
    snip.expand_anon(anon_snippet_body)
endglobal

post_jump "inc_header(snip)"
snippet Inc "include internal headers" b
endsnippet

snippet def "define in c" b
/**
** \def ${1:MAX(X, Y)}
** \brief ${2:brief}
**
endsnippet
